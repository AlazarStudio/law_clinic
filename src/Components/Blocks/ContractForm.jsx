import React, { useEffect, useState } from "react";
import {
  TextField, Button, Dialog, DialogActions, DialogContent, DialogTitle,
  Box, IconButton, Typography, MenuItem, Select, InputLabel, FormControl
} from "@mui/material";
import { Add, Delete } from "@mui/icons-material";
import contractService from "../../Services/contractService";

function ContractForm({ open, handleClose, refreshContracts, userId }) {
  const [contract, setContract] = useState({
    title: "",
    client: "",
    status: "–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏",
    date: new Date().toISOString().split("T")[0],
    endDate: "",
    additionalFields: [],
  });

  const [newField, setNewField] = useState({ name: "", value: "" });
  const [clients, setClients] = useState([]);
  const [showAddClient, setShowAddClient] = useState(false);
  const [newClient, setNewClient] = useState({ name: "", email: "" });

  // üîπ –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã
  useEffect(() => {
    if (open) {
      fetch(`https://law-clinik-back.onrender.com/users?role=client`)
        .then(res => res.json())
        .then(setClients)
        .catch(err => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤", err));
    }
  }, [open]);

  const handleChange = (e) => {
    setContract({ ...contract, [e.target.name]: e.target.value });
  };

  const handleAddField = () => {
    if (newField.name.trim() && newField.value.trim()) {
      setContract(prev => ({
        ...prev,
        additionalFields: [...prev.additionalFields, { ...newField }],
      }));
      setNewField({ name: "", value: "" });
    }
  };

  const handleRemoveField = (index) => {
    setContract(prev => ({
      ...prev,
      additionalFields: prev.additionalFields.filter((_, i) => i !== index),
    }));
  };

  const handleAddClient = async () => {
    const newUser = {
      ...newClient,
      role: "client",
      password: newClient.email // üîê –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å
    };

    const res = await fetch(`https://law-clinik-back.onrender.com/users`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(newUser),
    });

    if (res.ok) {
      const created = await res.json();
      setClients([...clients, created]);
      setContract(prev => ({ ...prev, client: created.name }));
      setNewClient({ name: "", email: "" });
      setShowAddClient(false);
    } else {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞");
    }
  };

  const handleSubmit = async () => {
    if (!contract.title || !contract.client || !contract.date) {
      alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è!");
      return;
    }

    const contractToSave = {
      ...contract,
      userId,
    };

    await contractService.addContract(contractToSave);
    refreshContracts();
    handleClose();
  };

  return (
    <Dialog open={open} onClose={handleClose} fullWidth maxWidth="sm">
      <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä</DialogTitle>
      <DialogContent>

        <TextField fullWidth margin="dense" label="–ù–∞–∑–≤–∞–Ω–∏–µ" name="title" onChange={handleChange} />

        <Box display="flex" alignItems="center" gap={1}>
          <FormControl fullWidth margin="dense">
            <InputLabel>–ö–ª–∏–µ–Ω—Ç</InputLabel>
            <Select
              name="client"
              value={contract.client}
              onChange={handleChange}
              label="–ö–ª–∏–µ–Ω—Ç"
            >
              {clients.map(c => (
                <MenuItem key={c.id} value={c.name}>{c.name} ({c.email})</MenuItem>
              ))}
            </Select>
          </FormControl>

          <IconButton onClick={() => setShowAddClient(true)} color="primary" sx={{ mt: 1 }}>
            <Add />
          </IconButton>
        </Box>

        <TextField fullWidth margin="dense" label="–î–∞—Ç–∞" type="date" name="date" onChange={handleChange} defaultValue={contract.date} />
        <TextField fullWidth margin="dense" label="–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è" type="date" name="endDate" onChange={handleChange} defaultValue={contract.date} />

        <Typography variant="h6" mt={3}>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è</Typography>
        {contract.additionalFields.map((field, index) => (
          <Box key={index} display="flex" alignItems="center" gap={1} mt={1}>
            <TextField fullWidth label="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è" value={field.name} disabled />
            <TextField fullWidth label="–ó–Ω–∞—á–µ–Ω–∏–µ" value={field.value} disabled />
            <IconButton onClick={() => handleRemoveField(index)} color="error">
              <Delete />
            </IconButton>
          </Box>
        ))}

        <Box display="flex" gap={1} mt={2}>
          <TextField fullWidth label="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è" value={newField.name} onChange={(e) => setNewField({ ...newField, name: e.target.value })} />
          <TextField fullWidth label="–ó–Ω–∞—á–µ–Ω–∏–µ" value={newField.value} onChange={(e) => setNewField({ ...newField, value: e.target.value })} />
          <IconButton onClick={handleAddField} color="primary">
            <Add />
          </IconButton>
        </Box>
      </DialogContent>

      <DialogActions>
        <Button onClick={handleClose} color="secondary">–û—Ç–º–µ–Ω–∞</Button>
        <Button onClick={handleSubmit} color="primary" variant="contained">–î–æ–±–∞–≤–∏—Ç—å</Button>
      </DialogActions>

      {/* üîπ –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ */}
      <Dialog open={showAddClient} onClose={() => setShowAddClient(false)}>
        <DialogTitle>–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç</DialogTitle>
        <DialogContent>
          <TextField fullWidth margin="dense" label="–ò–º—è" value={newClient.name} onChange={(e) => setNewClient({ ...newClient, name: e.target.value })} />
          <TextField fullWidth margin="dense" label="Email" type="email" value={newClient.email} onChange={(e) => setNewClient({ ...newClient, email: e.target.value })} />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowAddClient(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button onClick={handleAddClient} variant="contained">–°–æ–∑–¥–∞—Ç—å</Button>
        </DialogActions>
      </Dialog>
    </Dialog>
  );
}

export default ContractForm;
